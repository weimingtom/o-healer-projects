<?xml version="1.0" encoding="UTF-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:comp="*"
	paddingTop="0" paddingLeft="0"
	paddingRight="0" paddingBottom="0"
	applicationComplete="init()"
>
	<!--Script-->
	<mx:Script>
		<![CDATA[
/*
			以下のライブラリを使っています
			・as3yaml
			　・http://code.google.com/p/as3yaml/
			・AS3 Zip Library
			　・http://nochump.com/blog/archives/15
*/

/*
			ToDo：
			・カラーパレットの初期化
			・カラーパレットの枠（透明でもOKなように）
			・透明をわからせるための背景スクロール（Bitmapのスクロールで実現可能？）
			・アルファパレットを用意すべきかなぁ
			　・汎用性も上がるし、初期化もしやすくなるが、複雑化もする
*/
			import mx.graphics.codec.*;

			import org.as3yaml.*;

			import nochump.util.zip.*;

			import mx.controls.*;
			import mx.events.*;
/*
			//トレース対象
			[Embed(source='chara02_b_side.png')]
			 private static var Bitmap_Trace_Color: Class;
//*/
/*
			//模写対象の追加
			[Embed(source='chara1_ci.png')]
			 private static var Bitmap_Sample_Color: Class;
			[Embed(source='chara1_si.png')]
			 private static var Bitmap_Sample_Shade: Class;
//*/
//*
			//chara1
			public var info_color:Array = [
				{H:0.8/6.0,	S:1.0/6.0,	B:3.5/6.0,	A:1},//Hair
				{H:3.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Eye
				{H:0.5/6.0,	S:4.5/6.0,	B:4.5/6.0,	A:1},//Skin
				{H:6.0/6.0,	S:6.0/6.0,	B:3.5/6.0,	A:1},//(no use)
				{H:3.5/6.0,	S:1.0/6.0,	B:3.5/6.0,	A:1},//Armor : Main
				{H:2.0/6.0,	S:5.5/6.0,	B:3.5/6.0,	A:1},//Armor : Line
				{H:2.0/6.0,	S:1.0/6.0,	B:2.0/6.0,	A:1},//Manteau
				{H:5.5/6.0,	S:1.0/6.0,	B:2.0/6.0,	A:1},//Gauntlet
				{H:6.0/6.0,	S:6.0/6.0,	B:0.0/6.0,	A:0} //(Trans)
			];
//*/
/*
			//chara2
			public var info_color:Array = [
				{H:0.0/6.0,	S:1.0/6.0,	B:3.0/6.0,	A:1},//Hair
				{H:1.0/6.0,	S:1.0/6.0,	B:3.0/6.0,	A:1},//Accessory
				{H:0.5/6.0,	S:4.5/6.0,	B:4.5/6.0,	A:1},//Skin
				{H:4.0/6.0,	S:6.0/6.0,	B:2.5/6.0,	A:1},//Eye
				{H:2.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Cloth : Main
				{H:1.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Cloth : Line
				{H:3.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Cloth : Line2
				{H:0.5/6.0,	S:1.0/6.0,	B:2.0/6.0,	A:1},//Leg
				{H:6.0/6.0,	S:6.0/6.0,	B:0.0/6.0,	A:0} //(Trans)
			];
//*/

			public var info_shade:Array = [
				{H:0, S:1, B:1, A:0.6},
				{H:0, S:1, B:0, A:0.6}
			];

			//最初のロード完了時の初期化
			private function init():void{
				var i:int;
				var j:int;

				var PaletteNum:int = Palette_Color.PALETTE_NUM;
				var PaletteCenterIndex:int = (PaletteNum-1)/2;

				//Init : Color
				{
					//色相・彩度
					palette_hs_color.SetData(
						info_color
					);

					//明度
					palette_b_color.SetData(
						info_color
					);

					//アルファ
					palette_a_color.SetData(
						info_color
					);

					//キャンバス
					canvas_color.SetFunc_Index2Color(
						function(in_Index:int):uint{
							return palette_c_color.GetColor(in_Index);
						}
					);
				}

				//Init : Shade
				{
					//色相・彩度
					palette_hs_shade.SetData(
						info_shade
					);

					//明度
					palette_b_shade.SetData(
						info_shade
					);

					//アルファ
					palette_a_shade.SetData(
						info_shade
					);

					//キャンバス
					canvas_shade.SetFunc_Index2Color(
						function(in_Index:int):uint{
							return palette_c_shade.GetColor(in_Index);
						}
					);
				}

				//Init : Result
				{
					canvas_result.SetFunc_GetColor_Color(
						function(in_X:int, in_Y:int):uint{
							return canvas_color.GetPixel32(in_X, in_Y);
						}
					);
					canvas_result.SetFunc_GetColor_Shade(
						function(in_X:int, in_Y:int):uint{
							return canvas_shade.GetPixel32(in_X, in_Y);
						}
					);
				}

				//色変更の接続：色相・彩度→明度→アルファ→カラーパレット→キャンバス→合成キャンバス
				{
					//色相・彩度→明度
					{
						//接続関数
						var ChangeColor_HS_to_B:Function = function():void{
							palette_b_color.Redraw(palette_hs_color.GetColor());
						};

						//初期化
						ChangeColor_HS_to_B();

						//接続
						palette_hs_color.SetListener_ChangeColor(function():void{
							ChangeColor_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeColor_B_to_A:Function = function():void{
							palette_a_color.Redraw(palette_b_color.GetColor());
							//palette_c_colorの選択中のやつを指定色で変更
							//ChangeLabel();
						};

						//初期化
						ChangeColor_B_to_A();

						//接続
						palette_b_color.SetListener_ChangeColor(function():void{
							ChangeColor_B_to_A();
						});
					}

					//アルファ→カラーパレット
					{
						//接続関数
						var ChangeColor_A_to_C:Function = function():void{
							palette_c_color.Redraw(palette_a_color.GetColor());
							//palette_c_colorの選択中のやつを指定色で変更
						};

						//初期化
						ChangeColor_A_to_C();

						//接続
						palette_a_color.SetListener_ChangeColor(function():void{
							ChangeColor_A_to_C();
						});
					}

					//カラーパレット→キャンバスの描画色
					{
						//接続関数
						var ChangeColor_C_to_C:Function = function():void{
//							canvas_color.SetColor(palette_c_color.GetColor());
							canvas_color.Redraw();
						};

						//初期化
						ChangeColor_C_to_C();

						//接続
						palette_c_color.SetListener_ChangeColor(function():void{
							ChangeColor_C_to_C();
						});
					}

					//キャンバス（色）→合成キャンバス
					{
						//接続関数
						var ChangeColor_C_to_R:Function = function():void{
							canvas_result.Redraw();
						};

						//初期化
						ChangeColor_C_to_R();//この段階では意味が無いか

						//接続
						canvas_color.SetListener_Redraw(function():void{
							ChangeColor_C_to_R();
						});
					}
				}

				//Index変更の接続：カラーパレット→色相・彩度→明度→アルファ
				{
					//カラーパレット→色相・彩度
					{
						//接続関数
						var ChangeIndex_C_to_HS:Function = function():void{
							palette_hs_color.SetCursorIndex(palette_c_color.GetCursorIndex());
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeIndex_C_to_HS();

						//接続
						palette_c_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_C_to_HS();
						});
					}

					//色相・彩度→明度
					{
						//接続関数
						var ChangeIndex_HS_to_B:Function = function():void{
							palette_b_color.SetCursorIndex(palette_hs_color.GetCursorIndex());
							palette_b_color.Redraw(palette_hs_color.GetColor());//表示色も変更
						};

						//初期化
						ChangeIndex_HS_to_B();

						//接続
						palette_hs_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeIndex_B_to_A:Function = function():void{
							palette_a_color.SetCursorIndex(palette_b_color.GetCursorIndex());
							palette_a_color.Redraw(palette_b_color.GetColor());//表示色も変更
						};

						//初期化
						ChangeIndex_B_to_A();

						//接続
						palette_b_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_B_to_A();
						});
					}

					//カラーパレット→キャンバス
					{
						//接続関数
						var ChangeIndex_C_to_C:Function = function():void{
							canvas_color.SetCursorIndex(palette_c_color.GetCursorIndex(), palette_c_color.GetColor());
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeIndex_C_to_C();

						//接続
						palette_c_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_C_to_C();
						});
					}
				}

				//リスナ連鎖によるカラーパレットの初期化
				{
					//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
					for(i = 0; i <= PaletteNum; i++){
						palette_c_color.SetCursorIndex(i % PaletteNum);

						for(j = 0; j < palette_hs_color.m_ListenerList_ChangeColor.length; j++){
							palette_hs_color.m_ListenerList_ChangeColor[j]();
						}
					}
				}

				//陰も同様
				{
					//色相・彩度→明度
					{
						//接続関数
						var ChangeShadeColor_HS_to_B:Function = function():void{
							palette_b_shade.Redraw(palette_hs_shade.GetColor());
						};

						//初期化
						ChangeShadeColor_HS_to_B();

						//接続
						palette_hs_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeShadeColor_B_to_A:Function = function():void{
							palette_a_shade.Redraw(palette_b_shade.GetColor());
							//palette_c_shadeの選択中のやつを指定色で変更
						};

						//初期化
						ChangeShadeColor_B_to_A();

						//接続
						palette_b_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_B_to_A();
						});
					}

					//#ここは特殊なので「陰」特有仕様
					//アルファ→カラーパレット
					{
						//接続関数
						var ChangeShadeColor_A_to_C:Function = function():void{
							var rgb:uint = palette_a_shade.GetColor() & 0x00FFFFFF;
							var a_ori:uint = (palette_a_shade.GetColor() >> 24) & 0xFF;
							var a:uint;

							var i:int;

							switch(palette_a_shade.GetCursorIndex()){
							case 0://光
								for(i = 0; i < PaletteCenterIndex; i++){
									a = a_ori * (PaletteCenterIndex-i)/PaletteCenterIndex;
									palette_c_shade.Redraw((a << 24) | (rgb), i);
								}
								break;
							case 1://陰
								for(i = 0; i < PaletteCenterIndex; i++){
									a = a_ori * (PaletteCenterIndex-i)/PaletteCenterIndex;
									palette_c_shade.Redraw((a << 24) | (rgb), PaletteNum-1 - i);
								}
								break;
							}
							//palette_c_shadeの選択中のやつを指定色で変更
						};

						//初期化
						ChangeShadeColor_A_to_C();
						palette_c_shade.Redraw(0x00000000, PaletteCenterIndex);//中央色は更新されないのでここで初期化

						//接続
						palette_a_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_A_to_C();
						});
					}

					//カラーパレット→キャンバスの描画色
					{
						//接続関数
						var ChangeShadeColor_C_to_C:Function = function():void{
//							canvas_shade.SetColor(palette_c_shade.GetColor());
							canvas_shade.Redraw();
						};

						//初期化
						ChangeShadeColor_C_to_C();

						//接続
						palette_c_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_C_to_C();
						});
					}

					//キャンバス（色）→合成キャンバス
					{
						//接続関数
						var ChangeShadeColor_C_to_R:Function = function():void{
							canvas_result.Redraw();
						};

						//初期化
						ChangeShadeColor_C_to_R();//この段階では意味が無いか

						//接続
						canvas_shade.SetListener_Redraw(function():void{
							ChangeShadeColor_C_to_R();
						});
					}
				}

				//陰も同様
				{
					//#ここは特殊なので「陰」特有仕様
					//カラーパレット→色相・彩度
					{
						//接続関数
						var ChangeShadeIndex_C_to_HS:Function = function():void{
							if(palette_c_shade.GetCursorIndex() < PaletteCenterIndex){
								palette_hs_shade.SetCursorIndex(0);//光
							}
							if(palette_c_shade.GetCursorIndex() > PaletteCenterIndex){
								palette_hs_shade.SetCursorIndex(1);//陰
							}
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeShadeIndex_C_to_HS();

						//接続
						palette_c_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_C_to_HS();
						});
					}

					//色相・彩度→明度
					{
						//接続関数
						var ChangeShadeIndex_HS_to_B:Function = function():void{
							palette_b_shade.SetCursorIndex(palette_hs_shade.GetCursorIndex());
							palette_b_shade.Redraw(palette_hs_shade.GetColor());//表示色も変更
						};

						//初期化
						ChangeShadeIndex_HS_to_B();

						//接続
						palette_hs_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeShadeIndex_B_to_A:Function = function():void{
							palette_a_shade.SetCursorIndex(palette_b_shade.GetCursorIndex());
							palette_a_shade.Redraw(palette_b_shade.GetColor());//表示色も変更
						};

						//初期化
						ChangeShadeIndex_B_to_A();

						//接続
						palette_b_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_B_to_A();
						});
					}

					//カラーパレット→キャンバス
					{
						//接続関数
						var ChangeShadeIndex_C_to_C:Function = function():void{
							canvas_shade.SetCursorIndex(palette_c_shade.GetCursorIndex());
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeShadeIndex_C_to_C();

						//接続
						palette_c_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_C_to_C();
						});
					}
				}
/*
				//陰も同様
				{
					//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
					for(i = 0; i <= PaletteNum; i++){
						palette_c_shade.SetCursorIndex(i % PaletteNum);

						for(j = 0; j < palette_hs_shade.m_ListenerList_ChangeColor.length; j++){
							palette_hs_shade.m_ListenerList_ChangeColor[j]();
						}
					}
				}
/*/
				//陰も同様
				{
					//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
					for(i = 0; i <= PaletteNum; i+=PaletteNum-1){
						palette_c_shade.SetCursorIndex(i % PaletteNum);

						for(j = 0; j < palette_hs_shade.m_ListenerList_ChangeColor.length; j++){
							palette_hs_shade.m_ListenerList_ChangeColor[j]();
						}
					}

					palette_c_shade.SetCursorIndex(PaletteCenterIndex);
				}
//*/
				//最初は透明色で初期化されるように、キャンバスのIndexリストを調整
				{
					//Color
					canvas_color.ClearIndex(info_color.length - 1);//8番目のパレットで塗りつぶす
					canvas_color.Redraw();

					//Shade
					canvas_shade.ClearIndex(PaletteCenterIndex);//中央のパレットで塗りつぶす
					canvas_shade.Redraw();

					//Result
					canvas_result.Redraw();
				}

				//キャンバス用のボックスサイズの設定
				{
					box_canvas_color.width  = Canvas_Zoom.SIZE_W + box_canvas_color.verticalScrollBar.width;
					box_canvas_color.height = Canvas_Zoom.SIZE_H + box_canvas_color.horizontalScrollBar.height;

					box_canvas_shade.width  = Canvas_Zoom.SIZE_W + box_canvas_shade.verticalScrollBar.width;
					box_canvas_shade.height = Canvas_Zoom.SIZE_H + box_canvas_shade.horizontalScrollBar.height;
				}
				//それに合わせて履歴も
				{
					history_color.width = box_canvas_color.width;
					history_shade.width = box_canvas_shade.width;
				}

				//トレーステスト
				{
					canvas_shade.m_Bitmap_Trace.bitmapData = canvas_color.m_Bitmap.bitmapData;
					canvas_shade.m_Bitmap_Trace.alpha = 0.3;
				}
/*
				//トレーステスト：色
				{
					canvas_color.m_Bitmap_Trace.bitmapData = (new Bitmap_Trace_Color()).bitmapData;
					canvas_color.m_Bitmap_Trace.alpha = 0.3;
				}
//*/
/*
				//サンプル画像テスト
				{
					canvas_color.m_BitmapData_Index.draw(new Bitmap_Sample_Color());
					canvas_color.Redraw();
					canvas_shade.m_BitmapData_Index.draw(new Bitmap_Sample_Shade());
					canvas_shade.Redraw();
				}
//*/
				//履歴
				{
					canvas_color.onDrawEnd = AddHistory_C;
					canvas_shade.onDrawEnd = AddHistory_S;
/*
					//履歴が追加されたら、スクロールバーを右に寄せる
					history_color.horizontalScrollBar.addEventListener(
						Event.RENDER,//スクロールバーのサイズが変更されるタイミングで実行してみる
						ChildExistenceChangedEvent.CHILD_ADD,
						function(e:Event):void{
							history_color.horizontalScrollPosition = history_color.horizontalScrollBar.maxScrollPosition;
							//history_color.removeAllChildren();//Check
						}
					);
					history_shade.horizontalScrollBar.addEventListener(
						Event.RENDER,
						function(e:Event):void{
							history_shade.horizontalScrollPosition = history_shade.horizontalScrollBar.maxScrollPosition;
							//history_shade.removeAllChildren();//Check
						}
					);
//*/
				}
				//!!ロード完了時は履歴をリセットしたい
			}

			//履歴のリセット
			private function ResetHistory_C():void{
				history_color.removeAllChildren();
			}
			private function ResetHistory_S():void{
				history_shade.removeAllChildren();
			}

			//今のグラフィックを履歴に追加する
			private function AddHistory_C():void{
				var img:Image = new Image();
				{//見た目
					img.addChild(new Bitmap(canvas_color.m_BitmapData.clone()));
					img.width  = Canvas_Zoom.DOT_NUM;
					img.height = Canvas_Zoom.DOT_NUM;
				}

				{//Event
					var bmp_data_index:BitmapData = canvas_color.m_BitmapData_Index.clone();

					//クリックされたら対応する状態に戻す
					img.addEventListener(
						MouseEvent.MOUSE_DOWN,
						function(e:MouseEvent):void{
							canvas_color.m_BitmapData_Index.draw(bmp_data_index);
							canvas_color.Redraw();
						}
					);

					//スクロールバーを右端に寄せる
					img.addEventListener(
						FlexEvent.CREATION_COMPLETE,//登録完了時に実行
						function(e:Event):void{
							history_color.horizontalScrollPosition = history_color.horizontalScrollBar.maxScrollPosition;
						}
					);
				}

				history_color.addChild(img);
			}
			private function AddHistory_S():void{
				var img:Image = new Image();
				{//見た目
					img.addChild(new Bitmap(canvas_shade.m_BitmapData.clone()));
					img.width  = Canvas_Zoom.DOT_NUM;
					img.height = Canvas_Zoom.DOT_NUM;
				}

				{//Event
					var bmp_data_index:BitmapData = canvas_shade.m_BitmapData_Index.clone();

					//クリックされたら対応する状態に戻す
					img.addEventListener(
						MouseEvent.MOUSE_DOWN,
						function(e:MouseEvent):void{
							canvas_shade.m_BitmapData_Index.draw(bmp_data_index);
							canvas_shade.Redraw();
						}
					);

					//スクロールバーを右端に寄せる
					img.addEventListener(
						FlexEvent.CREATION_COMPLETE,//登録完了時に実行
						function(e:Event):void{
							history_shade.horizontalScrollPosition = history_shade.horizontalScrollBar.maxScrollPosition;
						}
					);
				}

				history_shade.addChild(img);
			}

			private function Save():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_result.m_Bitmap.bitmapData), "Result.png");
//				(new FileReference).save((new PNGEncoder()).encode(canvas_color.m_Bitmap.bitmapData), "Result_Color.png");//連続は不可らしい
//				(new FileReference).save((new PNGEncoder()).encode(canvas_shade.m_Bitmap.bitmapData), "Result_Shade.png");
			}
			private function Save_All():void{
				//Zipで一通りセーブ
				var fileName:String;
				var fileData:ByteArray;
				var ze:ZipEntry;

				var zipOut:ZipOutput = new ZipOutput();
				{
					{//Result
						fileName = "Result.png";
						fileData = (new PNGEncoder()).encode(canvas_result.m_Bitmap.bitmapData);
						ze = new ZipEntry(fileName);

						zipOut.putNextEntry(ze);
						zipOut.write(fileData);
						zipOut.closeEntry();
					}

					{//Index : Color
						fileName = "Index_Color.png";
						fileData = (new PNGEncoder()).encode(canvas_color.m_BitmapData_Index);
						ze = new ZipEntry(fileName);

						zipOut.putNextEntry(ze);
						zipOut.write(fileData);
						zipOut.closeEntry();
					}

					{//Index : Shade
						fileName = "Index_Shade.png";
						fileData = (new PNGEncoder()).encode(canvas_shade.m_BitmapData_Index);
						ze = new ZipEntry(fileName);

						zipOut.putNextEntry(ze);
						zipOut.write(fileData);
						zipOut.closeEntry();
					}

					var list_h:Array;
					var list_s:Array;
					var list_b:Array;
					var list_a:Array;
					var list:Array;
					var i:int;

					{//Palette : Color
						//セーブ情報
						var palette_color:Object;
						{
							list_h = palette_hs_color.GetHueRatioList();
							list_s = palette_hs_color.GetSaturationRatioList();
							list_b = palette_b_color.GetBrightnessRatioList();
							list_a = palette_a_color.GetAlphaRatioList();

							list = new Array(info_color.length);
							{
								for(i = 0; i < info_color.length; i++){
									list[i] = {
										H:(list_h[i]),
										S:(list_s[i]),
										B:(list_b[i]),
										A:(list_a[i])
									};
								}
							}

							palette_color = list;//{palette_color:list};
						}

						fileName = "Palette_Color.yaml";
						fileData = new ByteArray();
						fileData.writeUTFBytes(YAML.encode(palette_color));
						ze = new ZipEntry(fileName);

						zipOut.putNextEntry(ze);
						zipOut.write(fileData);
						zipOut.closeEntry();
					}

					{//Palette : Shade
						//セーブ情報
						var palette_shade:Object;
						{
							list_h = palette_hs_shade.GetHueRatioList();
							list_s = palette_hs_shade.GetSaturationRatioList();
							list_b = palette_b_shade.GetBrightnessRatioList();
							list_a = palette_a_shade.GetAlphaRatioList();

							list = new Array(info_shade.length);
							{
								for(i = 0; i < info_shade.length; i++){
									list[i] = {
										H:(list_h[i]),
										S:(list_s[i]),
										B:(list_b[i]),
										A:(list_a[i])
									};
								}
							}

							palette_shade = list;//{palette_shade:list};
						}

						fileName = "Palette_Shade.yaml";
						fileData = new ByteArray();
						fileData.writeUTFBytes(YAML.encode(palette_shade));
						ze = new ZipEntry(fileName);

						zipOut.putNextEntry(ze);
						zipOut.write(fileData);
						zipOut.closeEntry();
					}

					zipOut.finish();
				}

				(new FileReference).save(zipOut.byteArray, "Result.zip");
			}

			private function Save_C():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_color.m_Bitmap.bitmapData), "Result_Color.png");
			}

			private function Save_S():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_shade.m_Bitmap.bitmapData), "Result_Shade.png");
			}

			private function Save_C_Index():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_color.m_BitmapData_Index), "Result_Color_Index.png");
			}

			private function Save_S_Index():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_shade.m_BitmapData_Index), "Result_Shade_Index.png");
			}

			private function Load_All():void{
				var fr:FileReference = new FileReference();

				//Select => Load
				fr.addEventListener(
					Event.SELECT,//ファイルが選択されたら
					function(e:Event):void{
						//拡張子をチェックして
						{
/*
							if(fr.extension != "zip"){
								//err
								return;
							}
/*/
							if(fr.name.indexOf(".zip") < 0){//チェックとしては不十分だけどまぁよし
								//err
								return;
							}
//*/
						}

						//ロード開始
						{
							fr.load();
						}
					}
				);

				//Load Func
				var load:Object = {};
				{
					load["Index_Color.png"] = function(i_Data:ByteArray):void{
						var loader:Loader = new Loader();
						loader.loadBytes(i_Data);

						loader.contentLoaderInfo.addEventListener(
							Event.COMPLETE,
							function(e:Event):void{
								canvas_color.m_BitmapData_Index.draw(loader.content);
								canvas_color.Redraw();

								//さらに履歴をリセット
//								ResetHistory_C();
								AddHistory_C();
							}
						);
					};

					load["Index_Shade.png"] = function(i_Data:ByteArray):void{
						var loader:Loader = new Loader();
						loader.loadBytes(i_Data);

						loader.contentLoaderInfo.addEventListener(
							Event.COMPLETE,
							function(e:Event):void{
								canvas_shade.m_BitmapData_Index.draw(loader.content);
								canvas_shade.Redraw();

								//さらに履歴をリセット
//								ResetHistory_S();
								AddHistory_S();
							}
						);
					};

					load["Palette_Color.yaml"] = function(i_Data:ByteArray):void{
						var i:int;
						var j:int;
						var len:int = info_color.length;

						var yaml_str:String = i_Data.toString();
						var yaml_map:Object = YAML.decode(yaml_str);

						for(i = 0; i < len; i++){
							info_color[i].H = yaml_map[i].H;
							info_color[i].S = yaml_map[i].S;
							info_color[i].B = yaml_map[i].B;
							info_color[i].A = yaml_map[i].A;
						}

						//色相・彩度
						palette_hs_color.SetData(
							info_color
						);

						//明度
						palette_b_color.SetData(
							info_color
						);

						//アルファ
						palette_a_color.SetData(
							info_color
						);

						//リスナ連鎖によるカラーパレットの初期化
						{
							//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
							for(i = 0; i <= len; i++){
								palette_c_color.SetCursorIndex(i % len);

								for(j = 0; j < palette_hs_color.m_ListenerList_ChangeColor.length; j++){
									palette_hs_color.m_ListenerList_ChangeColor[j]();
								}
							}
						}
					};

					load["Palette_Shade.yaml"] = function(i_Data:ByteArray):void{
						var i:int;
						var j:int;
						var len:int = info_shade.length;

						var yaml_str:String = i_Data.toString();
						var yaml_map:Object = YAML.decode(yaml_str);

						for(i = 0; i < len; i++){
							info_shade[i].H = yaml_map[i].H;
							info_shade[i].S = yaml_map[i].S;
							info_shade[i].B = yaml_map[i].B;
							info_shade[i].A = yaml_map[i].A;
						}

						//色相・彩度
						palette_hs_shade.SetData(
							info_shade
						);

						//明度
						palette_b_shade.SetData(
							info_shade
						);

						//アルファ
						palette_a_shade.SetData(
							info_shade
						);

						//リスナ連鎖によるカラーパレットの初期化
						{
							//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
							for(i = 0; i <= len; i++){
								palette_c_shade.SetCursorIndex(i % len);

								for(j = 0; j < palette_hs_shade.m_ListenerList_ChangeColor.length; j++){
									palette_hs_shade.m_ListenerList_ChangeColor[j]();
								}
							}
						}
					};
				}

				//Load => Draw
				fr.addEventListener(
					Event.COMPLETE,
					function(e:Event):void{
						var zip:ZipFile = new ZipFile(fr.data);

						for(var i:int = 0; i < zip.entries.length; i++){
							var entry:ZipEntry = zip.entries[i];
							var zd:ByteArray = zip.getInput(entry);

							if(load[entry.name]){
								load[entry.name](zd);
							}
						}
					}
				);

				//実行
				fr.browse();
			}

			private function Load_C_Index():void{
				var fr:FileReference = new FileReference();

				//Select => Load
				fr.addEventListener(
					Event.SELECT,//ファイルが選択されたら
					function(e:Event):void{fr.load();}//ロード開始
				);

				//Load => Draw
				fr.addEventListener(
					Event.COMPLETE,
					function(e:Event):void{
						var loader:Loader = new Loader();
						loader.loadBytes(fr.data);

						loader.contentLoaderInfo.addEventListener(
							Event.COMPLETE,
							function(e:Event):void{
								canvas_color.m_BitmapData_Index.draw(loader.content);
								canvas_color.Redraw();

								//ロード時の表示確認にも反映
								Copy_Ori2Save_Canvas_C();
							}
						);
					}
				);

				//実行
				fr.browse();
			}

			private function Load_S_Index():void{
				var fr:FileReference = new FileReference();

				//Select => Load
				fr.addEventListener(
					Event.SELECT,//ファイルが選択されたら
					function(e:Event):void{fr.load();}//ロード開始
				);

				//Load => Draw
				fr.addEventListener(
					Event.COMPLETE,
					function(e:Event):void{
						var loader:Loader = new Loader();
						loader.loadBytes(fr.data);

						loader.contentLoaderInfo.addEventListener(
							Event.COMPLETE,
							function(e:Event):void{
								canvas_shade.m_BitmapData_Index.draw(loader.content);
								canvas_shade.Redraw();

								//ロード時の表示確認にも反映
								Copy_Ori2Save_Canvas_S();
							}
						);
					}
				);

				//実行
				fr.browse();
			}

			private var fr_c:FileReference;
			private function Load_C_Palette():void{
				if(fr_c == null){
					fr_c = new FileReference();

					//Select => Load
					fr_c.addEventListener(
						Event.SELECT,//ファイルが選択されたら
						function(e:Event):void{fr_c.load();}//ロード開始
					);

					//Load => Set
					fr_c.addEventListener(
						Event.COMPLETE,
						function(e:Event):void{
							var i:int;
							var j:int;
							var len:int = info_color.length;

							var yaml_str:String = fr_c.data.toString();
							var yaml_map:Object = YAML.decode(yaml_str);

							for(i = 0; i < len; i++){
								info_color[i].H = yaml_map[i].H;
								info_color[i].S = yaml_map[i].S;
								info_color[i].B = yaml_map[i].B;
								info_color[i].A = yaml_map[i].A;
							}

							//色相・彩度
							palette_hs_color.SetData(
								info_color
							);

							//明度
							palette_b_color.SetData(
								info_color
							);

							//アルファ
							palette_a_color.SetData(
								info_color
							);

							//リスナ連鎖によるカラーパレットの初期化
							{
								//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
								for(i = 0; i <= len; i++){
									palette_c_color.SetCursorIndex(i % len);

									for(j = 0; j < palette_hs_color.m_ListenerList_ChangeColor.length; j++){
										palette_hs_color.m_ListenerList_ChangeColor[j]();
									}
								}
							}

							//ついでにセーブ画面の表示も更新
							Copy_Ori2Save_Palette_C();
						}
					);
				}

				//実行
				fr_c.browse();
			}

			private function Save_C_Palette():void{
				//セーブ情報
				var palette_color:Object;
				{
					var list_h:Array = palette_hs_color.GetHueRatioList();
					var list_s:Array = palette_hs_color.GetSaturationRatioList();
					var list_b:Array = palette_b_color.GetBrightnessRatioList();
					var list_a:Array = palette_a_color.GetAlphaRatioList();

					var list:Array = new Array(info_color.length);
					{
						for(var i:int = 0; i < info_color.length; i++){
							list[i] = {
								H:(list_h[i]),
								S:(list_s[i]),
								B:(list_b[i]),
								A:(list_a[i])
							};
						}
					}

					palette_color = list;//{palette_color:list};
				}

				var result:String = YAML.encode(palette_color);

				(new FileReference).save(result, "Palette_Color.yaml");
			}

			private var fr_s:FileReference;
			private function Load_S_Palette():void{
				if(fr_s == null){
					fr_s = new FileReference();

					//Select => Load
					fr_s.addEventListener(
						Event.SELECT,//ファイルが選択されたら
						function(e:Event):void{fr_s.load();}//ロード開始
					);

					//Load => Set
					fr_s.addEventListener(
						Event.COMPLETE,
						function(e:Event):void{
							var i:int;
							var j:int;
							var len:int = info_shade.length;

							var yaml_str:String = fr_s.data.toString();
							var yaml_map:Object = YAML.decode(yaml_str);

							for(i = 0; i < len; i++){
								info_shade[i].H = yaml_map[i].H;
								info_shade[i].S = yaml_map[i].S;
								info_shade[i].B = yaml_map[i].B;
								info_shade[i].A = yaml_map[i].A;
							}

							//色相・彩度
							palette_hs_shade.SetData(
								info_shade
							);

							//明度
							palette_b_shade.SetData(
								info_shade
							);

							//アルファ
							palette_a_shade.SetData(
								info_shade
							);

							//リスナ連鎖によるカラーパレットの初期化
							{
								//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
								for(i = 0; i <= len; i++){
									palette_c_shade.SetCursorIndex(i % len);

									for(j = 0; j < palette_hs_shade.m_ListenerList_ChangeColor.length; j++){
										palette_hs_shade.m_ListenerList_ChangeColor[j]();
									}
								}
							}

							//ついでにセーブ画面の表示も更新
							Copy_Ori2Save_Palette_S();
						}
					);
				}

				//実行
				fr_s.browse();
			}

			private function Save_S_Palette():void{
				//セーブ情報
				var palette_shade:Object;
				{
					var list_h:Array = palette_hs_shade.GetHueRatioList();
					var list_s:Array = palette_hs_shade.GetSaturationRatioList();
					var list_b:Array = palette_b_shade.GetBrightnessRatioList();
					var list_a:Array = palette_a_shade.GetAlphaRatioList();

					var list:Array = new Array(info_shade.length);
					{
						for(var i:int = 0; i < info_shade.length; i++){
							list[i] = {
								H:(list_h[i]),
								S:(list_s[i]),
								B:(list_b[i]),
								A:(list_a[i])
							};
						}
					}

					palette_shade = list;//{palette_shade:list};
				}

				var result:String = YAML.encode(palette_shade);

				(new FileReference).save(result, "Palette_Shade.yaml");
			}

			public function Canvas_x(in_Ratio:Number):void{
				canvas_color.scaleX = in_Ratio;
				canvas_color.scaleY = in_Ratio;
				canvas_shade.scaleX = in_Ratio;
				canvas_shade.scaleY = in_Ratio;
			}

			public function Canvas_Color_x(in_Ratio:Number):void{
				canvas_color.scaleX = in_Ratio;
				canvas_color.scaleY = in_Ratio;
			}

			public function Canvas_Shade_x(in_Ratio:Number):void{
				canvas_shade.scaleX = in_Ratio;
				canvas_shade.scaleY = in_Ratio;
			}

			public function Canvas_SetCursorMode(in_Mode:int):void{
				canvas_color.SetCursorMode(in_Mode);
				canvas_shade.SetCursorMode(in_Mode);
			}

			public function Canvas_Draw(in_Mode:int):void{
				canvas_color.SetDrawMode(in_Mode);
				canvas_shade.SetDrawMode(in_Mode);
			}

			public function Canvas_Color_Draw(in_Mode:int):void{
				canvas_color.SetDrawMode(in_Mode);
			}

			public function Canvas_Shade_Draw(in_Mode:int):void{
				canvas_shade.SetDrawMode(in_Mode);
			}


			public function ScrollBitmap(in_MoveX:int, in_MoveY:int):void{
				const Scroll:Function = function(in_Canvas:Canvas_Zoom):void{
					var ori_bmp_data:BitmapData = in_Canvas.m_BitmapData_Index.clone();

					//すごく愚直にやるので遅い
					for(var y:int = Canvas_Zoom.DOT_NUM; y < 2*Canvas_Zoom.DOT_NUM; y++){//「%」だけで済むように、ゲタをはかせる
						for(var x:int = Canvas_Zoom.DOT_NUM; x < 2*Canvas_Zoom.DOT_NUM; x++){
							in_Canvas.m_BitmapData_Index.setPixel32(
								(x + in_MoveX) % Canvas_Zoom.DOT_NUM,
								(y + in_MoveY) % Canvas_Zoom.DOT_NUM,
								ori_bmp_data.getPixel32(
									x % Canvas_Zoom.DOT_NUM,
									y % Canvas_Zoom.DOT_NUM
								)
							);
						}
					}

					//反映
					in_Canvas.Redraw();
				};

				Scroll(canvas_color);
				Scroll(canvas_shade);
			}
/*
			public function ChangeLabel():void{
				var color:uint = palette_b_color.GetColor();

				var vec:Vector3D = new Vector3D((color >> 16) & 0xFF, (color >> 8) & 0xFF, (color >> 0) & 0xFF);

				var len:Number = vec.length;

				var str:String = "";
				for(var i:Number = 100; i >= 0.1; i *= 0.1){
					var val:int = len / i;

					str = str + val;

					if(0.9 < i && i < 1.1){//i == 1だとNumberなので不安
						str = str + ".";
					}

					len -= val * i;
				}

				label_color.text = str;
			}
//*/
			public function OpenClose_Color():void{
				if(area_color_picker.width == 0){
					//Close => Open

					//Open
					area_color_picker.percentWidth = 100;

					//Label
					open_close_button_color.label = "←閉じる";
				}else{
					//Open => Close

					//Close
					area_color_picker.width = 0;

					//Label
					open_close_button_color.label = "色調整";
				}
			}

			public function OpenClose_Shade():void{
				if(area_shade_picker.width == 0){
					//Close => Open

					//Open
					area_shade_picker.percentWidth = 100;

					//Label
					open_close_button_shade.label = "→閉じる";
				}else{
					//Open => Close

					//Close
					area_shade_picker.width = 0;

					//Label
					open_close_button_shade.label = "光陰調整";
				}
			}

			private function Copy_Ori2Save_Palette_C():void{
				var num:int = Palette_Color.PALETTE_NUM;

				for(var index:int = 0; index < num; index++){
					var color:uint = palette_c_color.GetColor(index);
					save_palette_c_color.Redraw(color, index);
				}
			}

			private function Copy_Ori2Save_Palette_S():void{
				var num:int = Palette_Color.PALETTE_NUM;

				for(var index:int = 0; index < num; index++){
					var color:uint = palette_c_shade.GetColor(index);
					save_palette_c_shade.Redraw(color, index);
				}
			}

			private function Copy_Ori2Save_Canvas_C():void{
				save_canvas_color.m_Bitmap.bitmapData = canvas_color.m_BitmapData.clone();
			}

			private function Copy_Ori2Save_Canvas_S():void{
				save_canvas_shade.m_Bitmap.bitmapData = canvas_shade.m_BitmapData.clone();
			}

			private function Copy_Ori2Save_Canvas_Result():void{
				save_canvas_result.m_Bitmap.bitmapData = canvas_result.m_BitmapData.clone();
			}
		]]>
	</mx:Script>

	<!--Style-->
	<mx:Style source="style.css"/>

	<!--View-->
	<mx:ViewStack id="view_base" borderStyle="solid" width="100%" height="100%">
		<mx:HBox id="view_base_draw" paddingTop="10">
			<!--Space-->
			<mx:Spacer width="100%"/>

			<!--HSBA-->
			<mx:VBox id="area_color_picker" height="100%" width="0">
				<mx:Panel title="色相・彩度(H_S)">
					<comp:Palette_HS id="palette_hs_color"/>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="100%"/>

				<mx:Panel title="輝度(L)"><!--Old:明度(B)-->
					<comp:Palette_B  id="palette_b_color"/>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="100%"/>

				<mx:Panel title="アルファ(A)">
					<comp:Palette_A  id="palette_a_color"/>
				</mx:Panel>

	<!--
				<mx:Spacer height="100%"/>

				<mx:Label id="label_color" color="0xFFFFFF"/>
	-->
			</mx:VBox>

			<!--Color-->
			<mx:VBox horizontalAlign="center">
				<mx:Panel title="色(Color)" paddingLeft="20" paddingRight="20">
					<comp:Palette_Color id="palette_c_color"/>
				</mx:Panel>

				<!-- Open&Close Button -->
				<mx:Button id="open_close_button_color" label="色調整" buttonDown="OpenClose_Color();"/>
			</mx:VBox>

			<!--Canvas : Color-->
			<mx:VBox>
				<!--Canvas-->
				<mx:Panel title="履歴(History)" width="100%" layout="horizontal">
					<mx:HBox id="history_color" horizontalScrollPolicy="on" height="48">
					</mx:HBox>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="10%"/>

				<!--Canvas-->
				<mx:Panel title="「色」キャンバス(Canvas_Color)" width="100%" layout="horizontal">
					<mx:Box id="box_canvas_color" verticalScrollPolicy="on" horizontalScrollPolicy="on">
						<comp:Canvas_Zoom id="canvas_color"/>
					</mx:Box>
				</mx:Panel>
			</mx:VBox>

			<!--Space-->
			<mx:Spacer width="100%"/>

			<!--Canvas : Result-->
			<mx:VBox>
				<!--Save & Load-->
				<mx:Panel title="セーブ＆ロード(Save＆Load)" width="100%" layout="horizontal">
					<mx:Button label="Save ＆ Load" buttonDown="view_base.selectedChild=view_base_save"/>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="100%"/>

				<!--Canvas-->
				<mx:Panel title="結果(Result)" width="100%">
					<comp:Canvas_Result id="canvas_result"/>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="100%"/>

				<!--Setting-->
				<mx:Panel title="設定(Settings)" width="100%" layout="vertical">
					<!--Combo : Size-->
					<mx:HBox width="100%">
						<mx:Label text="表示サイズ(Size)："/>
						<mx:Spacer width="100%"/>
						<mx:ComboBox id="combo_size" change="Canvas_x(combo_size.value as int)">
							<mx:dataProvider>
								<mx:Array>
									<mx:Object label="x1" data="1" />
									<mx:Object label="x2" data="2" />
									<mx:Object label="x4" data="4" />
									<mx:Object label="x8" data="8" />
								</mx:Array>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>

					<!--Combo : Cursor-->
					<mx:HBox width="100%">
						<mx:Label text="カーソル(Cursor)："/>
						<mx:Spacer width="100%"/>
						<mx:ComboBox id="combo_cursor" change="Canvas_SetCursorMode(combo_cursor.value as int)">
							<mx:dataProvider>
								<mx:Array>
									<mx:Object label="Normal" data="0" /><!--Canvas_Zoom.CURSOR_MODE_NORMAL-->
									<mx:Object label="Mirror16" data="1" /><!--Canvas_Zoom.CURSOR_MODE_MIRROR_16_16-->
									<mx:Object label="Mirror15" data="2" /><!--Canvas_Zoom.CURSOR_MODE_MIRROR_15_1_15-->
								</mx:Array>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>

					<!--Combo : Draw-->
					<mx:HBox width="100%">
						<mx:Label text="描画方法(Draw)："/>
						<mx:Spacer width="100%"/>
						<mx:ComboBox id="combo_draw" change="Canvas_Draw(combo_draw.value as int)">
							<mx:dataProvider>
								<mx:Array>
									<mx:Object label="Dot" data="0" /><!--Canvas_Zoom.DRAW_MODE_DOT-->
									<mx:Object label="Fill" data="1" /><!--Canvas_Zoom.DRAW_MODE_FILL-->
								</mx:Array>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>

					<mx:HBox width="100%">
						<mx:Spacer width="100%"/>
						<mx:Grid>
							<mx:GridRow>
								<mx:GridItem/>
								<mx:GridItem> <mx:Button label="↑" buttonDown="ScrollBitmap( 0, -1)"/> </mx:GridItem>
								<mx:GridItem/>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem> <mx:Button label="←" buttonDown="ScrollBitmap(-1,  0)"/> </mx:GridItem>
								<mx:GridItem horizontalAlign="center"> <mx:Label text="移動"/> </mx:GridItem>
								<mx:GridItem> <mx:Button label="→" buttonDown="ScrollBitmap( 1,  0)"/> </mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem/>
								<mx:GridItem> <mx:Button label="↓" buttonDown="ScrollBitmap( 0,  1)"/> </mx:GridItem>
								<mx:GridItem/>
							</mx:GridRow>
						</mx:Grid>
						<mx:Spacer width="100%"/>
					</mx:HBox>
				</mx:Panel>
			</mx:VBox>

			<!--Space-->
			<mx:Spacer width="100%"/>

			<!--Canvas : Shade-->
			<mx:VBox>
				<!--Canvas-->
				<mx:Panel title="履歴(History)" width="100%" layout="horizontal">
					<mx:HBox id="history_shade" horizontalScrollPolicy="on" height="48">
					</mx:HBox>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="10%"/>

				<!--Canvas-->
				<mx:Panel title="「陰」キャンバス(Canvas_Shade)" width="100%" layout="horizontal">
					<mx:Box id="box_canvas_shade" verticalScrollPolicy="on" horizontalScrollPolicy="on">
						<comp:Canvas_Zoom id="canvas_shade"/>
					</mx:Box>
				</mx:Panel>
			</mx:VBox>

			<!--Color of Shade-->
			<mx:VBox horizontalAlign="center">
				<mx:Panel title="光陰(Shade)" paddingLeft="20" paddingRight="20">
					<comp:Palette_Color id="palette_c_shade"/>
				</mx:Panel>

				<!-- Open&Close Button -->
				<mx:Button id="open_close_button_shade" label="光陰調整" buttonDown="OpenClose_Shade();"/>
			</mx:VBox>

			<!--HSBA of Shade-->
			<mx:VBox id="area_shade_picker" height="100%" width="0">
				<mx:Panel title="色相・彩度(H_S)">
					<comp:Palette_HS id="palette_hs_shade"/>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="100%"/>

				<mx:Panel title="輝度(L)"><!--Old:明度(B)-->
					<comp:Palette_B  id="palette_b_shade"/>
				</mx:Panel>

				<!--Space-->
				<mx:Spacer height="100%"/>

				<mx:Panel title="アルファ(A)">
					<comp:Palette_A  id="palette_a_shade"/>
				</mx:Panel>
			</mx:VBox>

			<!--Space-->
			<mx:Spacer width="100%"/>
		</mx:HBox>
		<mx:HBox id="view_base_save" paddingTop="10">
			<mx:TabNavigator id="tab_save" paddingTop="0" width="100%" height="100%">
				<mx:HBox id="tab_save_file" label="ファイル(File)">
					<mx:Spacer width="100%"/>

					<!--Palette : Color-->
					<mx:VBox height="100%">
						<mx:Spacer height="100%"/>
						<mx:Panel title="色(Color)">
							<mx:Button label="↓ロード(Load)" buttonDown="Load_C_Palette()"/>
							<mx:Spacer height="5"/>
							<comp:Palette_Color id="save_palette_c_color" render="Copy_Ori2Save_Palette_C()"/>
							<mx:Spacer height="5"/>
							<mx:Button label="↓セーブ(Save)" buttonDown="Save_C_Palette()"/>
						</mx:Panel>
						<mx:Spacer height="100%"/>
					</mx:VBox>

					<mx:Spacer width="100%"/>

					<!--Canvas : Color-->
					<mx:VBox height="100%">
						<mx:Spacer height="100%"/>
						<mx:Panel title="「色」キャンバス(Canvas_Color)">
							<mx:Button label="↓ロード(Load)" buttonDown="Load_C_Index()"/>
							<mx:Spacer height="5"/>
							<comp:Canvas_Zoom id="save_canvas_color" addedToStage="save_canvas_color.Init()" render="Copy_Ori2Save_Canvas_C()"/>
							<mx:Spacer height="5"/>
							<mx:Button label="↓セーブ(Save)" buttonDown="Save_C_Index()"/>
							<mx:Spacer height="5"/>
							<mx:Button label="↓セーブ：画像として(Save as Graphic)" buttonDown="Save_C()"/>
						</mx:Panel>
						<mx:Spacer height="100%"/>
					</mx:VBox>

					<mx:Spacer width="100%"/>

					<!--Center-->
					<mx:VBox height="100%" horizontalAlign="center">
						<mx:Spacer height="100%"/>

						<!--Return-->
						<mx:Button label="戻る(Return)" buttonDown="view_base.selectedChild=view_base_draw"/>

						<mx:Spacer height="100%"/>

						<mx:Panel title="まとめて(Zip)">
							<!--Load : All-->
							<mx:Button label="まとめてロード(Load:Zip)" buttonDown="Load_All()"/>

							<mx:Spacer height="40"/>

							<comp:Canvas_Result id="save_canvas_result" render="Copy_Ori2Save_Canvas_Result()"/>

							<mx:Spacer height="20"/>

							<!--Save : Result-->
							<mx:Button label="結果だけセーブ(Save:Result)" buttonDown="Save()"/>

							<mx:Spacer height="40"/>

							<!--Save : All-->
							<mx:Button label="まとめてセーブ(Save:Zip)" buttonDown="Save_All()"/>
						</mx:Panel>
						<mx:Spacer height="100%"/>
					</mx:VBox>

					<mx:Spacer width="100%"/>

					<!--Canvas : Shade-->
					<mx:VBox height="100%">
						<mx:Spacer height="100%"/>
						<mx:Panel title="「陰」キャンバス(Canvas_Shade)">
							<mx:Button label="↓ロード(Load)" buttonDown="Load_S_Index()"/>
							<mx:Spacer height="5"/>
							<comp:Canvas_Zoom id="save_canvas_shade" addedToStage="save_canvas_shade.Init()" render="Copy_Ori2Save_Canvas_S()"/>
							<mx:Spacer height="5"/>
							<mx:Button label="↓セーブ(Save)" buttonDown="Save_S_Index()"/>
							<mx:Spacer height="5"/>
							<mx:Button label="↓セーブ：画像として(Save as Graphic)" buttonDown="Save_S()"/>
						</mx:Panel>
						<mx:Spacer height="100%"/>
					</mx:VBox>

					<mx:Spacer width="100%"/>

					<!--Palette : Shade-->
					<mx:VBox height="100%">
						<mx:Spacer height="100%"/>
						<mx:Panel title="光陰(Shade)">
							<mx:Button label="↓ロード(Load)" buttonDown="Load_S_Palette()"/>
							<mx:Spacer height="5"/>
							<comp:Palette_Color id="save_palette_c_shade" render="Copy_Ori2Save_Palette_S()"/>
							<mx:Spacer height="5"/>
							<mx:Button label="↓セーブ(Save)" buttonDown="Save_S_Palette()"/>
						</mx:Panel>
						<mx:Spacer height="100%"/>
					</mx:VBox>

					<mx:Spacer width="100%"/>
				</mx:HBox>
			</mx:TabNavigator>
		</mx:HBox>
	</mx:ViewStack>
</mx:Application>
