<?xml version="1.0" encoding="UTF-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:comp="*"
	paddingTop="0" paddingLeft="0"
	paddingRight="0" paddingBottom="0"
	applicationComplete="init()"
>
	<!--Script-->
	<mx:Script>
		<![CDATA[
/*
			ToDo：
			・カラーパレットの初期化
			・カラーパレットの枠（透明でもOKなように）
			・透明をわからせるための背景スクロール（Bitmapのスクロールで実現可能？）
			・アルファパレットを用意すべきかなぁ
			　・汎用性も上がるし、初期化もしやすくなるが、複雑化もする
*/
			import mx.graphics.codec.*;

			import org.as3yaml.*;

/*
			//トレース対象
			[Embed(source='chara02_b_side.png')]
			 private static var Bitmap_Trace_Color: Class;
//*/
/*
			//模写対象の追加
			[Embed(source='chara1_ci.png')]
			 private static var Bitmap_Sample_Color: Class;
			[Embed(source='chara1_si.png')]
			 private static var Bitmap_Sample_Shade: Class;
//*/
//*
			//chara1
			public var info_color:Array = [
				{H:0.8/6.0,	S:1.0/6.0,	B:3.5/6.0,	A:1},//Hair
				{H:3.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Eye
				{H:0.5/6.0,	S:4.5/6.0,	B:4.5/6.0,	A:1},//Skin
				{H:6.0/6.0,	S:6.0/6.0,	B:3.5/6.0,	A:1},//(no use)
				{H:3.5/6.0,	S:1.0/6.0,	B:3.5/6.0,	A:1},//Armor : Main
				{H:2.0/6.0,	S:5.5/6.0,	B:3.5/6.0,	A:1},//Armor : Line
				{H:2.0/6.0,	S:1.0/6.0,	B:2.0/6.0,	A:1},//Manteau
				{H:5.5/6.0,	S:1.0/6.0,	B:2.0/6.0,	A:1},//Gauntlet
				{H:6.0/6.0,	S:6.0/6.0,	B:0.0/6.0,	A:0} //(Trans)
			];
//*/
/*
			//chara2
			public var info_color:Array = [
				{H:0.0/6.0,	S:1.0/6.0,	B:3.0/6.0,	A:1},//Hair
				{H:1.0/6.0,	S:1.0/6.0,	B:3.0/6.0,	A:1},//Accessory
				{H:0.5/6.0,	S:4.5/6.0,	B:4.5/6.0,	A:1},//Skin
				{H:4.0/6.0,	S:6.0/6.0,	B:2.5/6.0,	A:1},//Eye
				{H:2.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Cloth : Main
				{H:1.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Cloth : Line
				{H:3.0/6.0,	S:1.0/6.0,	B:2.5/6.0,	A:1},//Cloth : Line2
				{H:0.5/6.0,	S:1.0/6.0,	B:2.0/6.0,	A:1},//Leg
				{H:6.0/6.0,	S:6.0/6.0,	B:0.0/6.0,	A:0} //(Trans)
			];
//*/

			public var info_shade:Array = [
				{H:0, S:1, B:1, A:0.6},
				{H:0, S:1, B:0, A:0.6}
			];

			//最初のロード完了時の初期化
			private function init():void{
				var i:int;
				var j:int;

				var PaletteNum:int = Palette_Color.PALETTE_NUM;
				var PaletteCenterIndex:int = (PaletteNum-1)/2;

				//Init : Color
				{
					//色相・彩度
					palette_hs_color.SetData(
						info_color
					);

					//明度
					palette_b_color.SetData(
						info_color
					);

					//アルファ
					palette_a_color.SetData(
						info_color
					);

					//キャンバス
					canvas_color.SetFunc_Index2Color(
						function(in_Index:int):uint{
							return palette_c_color.GetColor(in_Index);
						}
					);
				}

				//Init : Shade
				{
					//色相・彩度
					palette_hs_shade.SetData(
						info_shade
					);

					//明度
					palette_b_shade.SetData(
						info_shade
					);

					//アルファ
					palette_a_shade.SetData(
						info_shade
					);

					//キャンバス
					canvas_shade.SetFunc_Index2Color(
						function(in_Index:int):uint{
							return palette_c_shade.GetColor(in_Index);
						}
					);
				}

				//Init : Result
				{
					canvas_result.SetFunc_GetColor_Color(
						function(in_X:int, in_Y:int):uint{
							return canvas_color.GetPixel32(in_X, in_Y);
						}
					);
					canvas_result.SetFunc_GetColor_Shade(
						function(in_X:int, in_Y:int):uint{
							return canvas_shade.GetPixel32(in_X, in_Y);
						}
					);
				}

				//色変更の接続：色相・彩度→明度→アルファ→カラーパレット→キャンバス→合成キャンバス
				{
					//色相・彩度→明度
					{
						//接続関数
						var ChangeColor_HS_to_B:Function = function():void{
							palette_b_color.Redraw(palette_hs_color.GetColor());
						};

						//初期化
						ChangeColor_HS_to_B();

						//接続
						palette_hs_color.SetListener_ChangeColor(function():void{
							ChangeColor_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeColor_B_to_A:Function = function():void{
							palette_a_color.Redraw(palette_b_color.GetColor());
							//palette_c_colorの選択中のやつを指定色で変更
							//ChangeLabel();
						};

						//初期化
						ChangeColor_B_to_A();

						//接続
						palette_b_color.SetListener_ChangeColor(function():void{
							ChangeColor_B_to_A();
						});
					}

					//アルファ→カラーパレット
					{
						//接続関数
						var ChangeColor_A_to_C:Function = function():void{
							palette_c_color.Redraw(palette_a_color.GetColor());
							//palette_c_colorの選択中のやつを指定色で変更
						};

						//初期化
						ChangeColor_A_to_C();

						//接続
						palette_a_color.SetListener_ChangeColor(function():void{
							ChangeColor_A_to_C();
						});
					}

					//カラーパレット→キャンバスの描画色
					{
						//接続関数
						var ChangeColor_C_to_C:Function = function():void{
//							canvas_color.SetColor(palette_c_color.GetColor());
							canvas_color.Redraw();
						};

						//初期化
						ChangeColor_C_to_C();

						//接続
						palette_c_color.SetListener_ChangeColor(function():void{
							ChangeColor_C_to_C();
						});
					}

					//キャンバス（色）→合成キャンバス
					{
						//接続関数
						var ChangeColor_C_to_R:Function = function():void{
							canvas_result.Redraw();
						};

						//初期化
						ChangeColor_C_to_R();//この段階では意味が無いか

						//接続
						canvas_color.SetListener_Redraw(function():void{
							ChangeColor_C_to_R();
						});
					}
				}

				//Index変更の接続：カラーパレット→色相・彩度→明度→アルファ
				{
					//カラーパレット→色相・彩度
					{
						//接続関数
						var ChangeIndex_C_to_HS:Function = function():void{
							palette_hs_color.SetCursorIndex(palette_c_color.GetCursorIndex());
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeIndex_C_to_HS();

						//接続
						palette_c_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_C_to_HS();
						});
					}

					//色相・彩度→明度
					{
						//接続関数
						var ChangeIndex_HS_to_B:Function = function():void{
							palette_b_color.SetCursorIndex(palette_hs_color.GetCursorIndex());
							palette_b_color.Redraw(palette_hs_color.GetColor());//表示色も変更
						};

						//初期化
						ChangeIndex_HS_to_B();

						//接続
						palette_hs_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeIndex_B_to_A:Function = function():void{
							palette_a_color.SetCursorIndex(palette_b_color.GetCursorIndex());
							palette_a_color.Redraw(palette_b_color.GetColor());//表示色も変更
						};

						//初期化
						ChangeIndex_B_to_A();

						//接続
						palette_b_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_B_to_A();
						});
					}

					//カラーパレット→キャンバス
					{
						//接続関数
						var ChangeIndex_C_to_C:Function = function():void{
							canvas_color.SetCursorIndex(palette_c_color.GetCursorIndex(), palette_c_color.GetColor());
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeIndex_C_to_C();

						//接続
						palette_c_color.SetListener_ChangeIndex(function():void{
							ChangeIndex_C_to_C();
						});
					}
				}

				//リスナ連鎖によるカラーパレットの初期化
				{
					//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
					for(i = 0; i <= PaletteNum; i++){
						palette_c_color.SetCursorIndex(i % PaletteNum);

						for(j = 0; j < palette_hs_color.m_ListenerList_ChangeColor.length; j++){
							palette_hs_color.m_ListenerList_ChangeColor[j]();
						}
					}
				}

				//陰も同様
				{
					//色相・彩度→明度
					{
						//接続関数
						var ChangeShadeColor_HS_to_B:Function = function():void{
							palette_b_shade.Redraw(palette_hs_shade.GetColor());
						};

						//初期化
						ChangeShadeColor_HS_to_B();

						//接続
						palette_hs_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeShadeColor_B_to_A:Function = function():void{
							palette_a_shade.Redraw(palette_b_shade.GetColor());
							//palette_c_shadeの選択中のやつを指定色で変更
						};

						//初期化
						ChangeShadeColor_B_to_A();

						//接続
						palette_b_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_B_to_A();
						});
					}

					//#ここは特殊なので「陰」特有仕様
					//アルファ→カラーパレット
					{
						//接続関数
						var ChangeShadeColor_A_to_C:Function = function():void{
							var rgb:uint = palette_a_shade.GetColor() & 0x00FFFFFF;
							var a_ori:uint = (palette_a_shade.GetColor() >> 24) & 0xFF;
							var a:uint;

							var i:int;

							switch(palette_a_shade.GetCursorIndex()){
							case 0://光
								for(i = 0; i < PaletteCenterIndex; i++){
									a = a_ori * (PaletteCenterIndex-i)/PaletteCenterIndex;
									palette_c_shade.Redraw((a << 24) | (rgb), i);
								}
								break;
							case 1://陰
								for(i = 0; i < PaletteCenterIndex; i++){
									a = a_ori * (PaletteCenterIndex-i)/PaletteCenterIndex;
									palette_c_shade.Redraw((a << 24) | (rgb), PaletteNum-1 - i);
								}
								break;
							}
							//palette_c_shadeの選択中のやつを指定色で変更
						};

						//初期化
						ChangeShadeColor_A_to_C();
						palette_c_shade.Redraw(0x00000000, PaletteCenterIndex);//中央色は更新されないのでここで初期化

						//接続
						palette_a_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_A_to_C();
						});
					}

					//カラーパレット→キャンバスの描画色
					{
						//接続関数
						var ChangeShadeColor_C_to_C:Function = function():void{
//							canvas_shade.SetColor(palette_c_shade.GetColor());
							canvas_shade.Redraw();
						};

						//初期化
						ChangeShadeColor_C_to_C();

						//接続
						palette_c_shade.SetListener_ChangeColor(function():void{
							ChangeShadeColor_C_to_C();
						});
					}

					//キャンバス（色）→合成キャンバス
					{
						//接続関数
						var ChangeShadeColor_C_to_R:Function = function():void{
							canvas_result.Redraw();
						};

						//初期化
						ChangeShadeColor_C_to_R();//この段階では意味が無いか

						//接続
						canvas_shade.SetListener_Redraw(function():void{
							ChangeShadeColor_C_to_R();
						});
					}
				}

				//陰も同様
				{
					//#ここは特殊なので「陰」特有仕様
					//カラーパレット→色相・彩度
					{
						//接続関数
						var ChangeShadeIndex_C_to_HS:Function = function():void{
							if(palette_c_shade.GetCursorIndex() < PaletteCenterIndex){
								palette_hs_shade.SetCursorIndex(0);//光
							}
							if(palette_c_shade.GetCursorIndex() > PaletteCenterIndex){
								palette_hs_shade.SetCursorIndex(1);//陰
							}
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeShadeIndex_C_to_HS();

						//接続
						palette_c_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_C_to_HS();
						});
					}

					//色相・彩度→明度
					{
						//接続関数
						var ChangeShadeIndex_HS_to_B:Function = function():void{
							palette_b_shade.SetCursorIndex(palette_hs_shade.GetCursorIndex());
							palette_b_shade.Redraw(palette_hs_shade.GetColor());//表示色も変更
						};

						//初期化
						ChangeShadeIndex_HS_to_B();

						//接続
						palette_hs_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_HS_to_B();
						});
					}

					//明度→アルファ
					{
						//接続関数
						var ChangeShadeIndex_B_to_A:Function = function():void{
							palette_a_shade.SetCursorIndex(palette_b_shade.GetCursorIndex());
							palette_a_shade.Redraw(palette_b_shade.GetColor());//表示色も変更
						};

						//初期化
						ChangeShadeIndex_B_to_A();

						//接続
						palette_b_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_B_to_A();
						});
					}

					//カラーパレット→キャンバス
					{
						//接続関数
						var ChangeShadeIndex_C_to_C:Function = function():void{
							canvas_shade.SetCursorIndex(palette_c_shade.GetCursorIndex());
							//範囲外の時はオールリセットになる感じで
							//範囲外の時はカーソルを動かないようにしてね
						};

						//初期化
						ChangeShadeIndex_C_to_C();

						//接続
						palette_c_shade.SetListener_ChangeIndex(function():void{
							ChangeShadeIndex_C_to_C();
						});
					}
				}
/*
				//陰も同様
				{
					//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
					for(i = 0; i <= PaletteNum; i++){
						palette_c_shade.SetCursorIndex(i % PaletteNum);

						for(j = 0; j < palette_hs_shade.m_ListenerList_ChangeColor.length; j++){
							palette_hs_shade.m_ListenerList_ChangeColor[j]();
						}
					}
				}
/*/
				//陰も同様
				{
					//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
					for(i = 0; i <= PaletteNum; i+=PaletteNum-1){
						palette_c_shade.SetCursorIndex(i % PaletteNum);

						for(j = 0; j < palette_hs_shade.m_ListenerList_ChangeColor.length; j++){
							palette_hs_shade.m_ListenerList_ChangeColor[j]();
						}
					}

					palette_c_shade.SetCursorIndex(PaletteCenterIndex);
				}
//*/
				//最初は透明色で初期化されるように、キャンバスのIndexリストを調整
				{
					//Color
					canvas_color.ClearIndex(info_color.length - 1);//8番目のパレットで塗りつぶす
					canvas_color.Redraw();

					//Shade
					canvas_shade.ClearIndex(PaletteCenterIndex);//中央のパレットで塗りつぶす
					canvas_shade.Redraw();

					//Result
					canvas_result.Redraw();
				}

				//キャンバス用のボックスサイズの設定
				{
					box_canvas_color.width  = Canvas_Zoom.SIZE_W + box_canvas_color.verticalScrollBar.width;
					box_canvas_color.height = Canvas_Zoom.SIZE_H + box_canvas_color.horizontalScrollBar.height;

					box_canvas_shade.width  = Canvas_Zoom.SIZE_W + box_canvas_shade.verticalScrollBar.width;
					box_canvas_shade.height = Canvas_Zoom.SIZE_H + box_canvas_shade.horizontalScrollBar.height;
				}

				//トレーステスト
				{
					canvas_shade.m_Bitmap_Trace.bitmapData = canvas_color.m_Bitmap.bitmapData;
					canvas_shade.m_Bitmap_Trace.alpha = 0.3;
				}
/*
				//トレーステスト：色
				{
					canvas_color.m_Bitmap_Trace.bitmapData = (new Bitmap_Trace_Color()).bitmapData;
					canvas_color.m_Bitmap_Trace.alpha = 0.3;
				}
//*/
/*
				//サンプル画像テスト
				{
					canvas_color.m_BitmapData_Index.draw(new Bitmap_Sample_Color());
					canvas_color.Redraw();
					canvas_shade.m_BitmapData_Index.draw(new Bitmap_Sample_Shade());
					canvas_shade.Redraw();
				}
//*/
			}

			private function Save():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_result.m_Bitmap.bitmapData), "Result.png");
//				(new FileReference).save((new PNGEncoder()).encode(canvas_color.m_Bitmap.bitmapData), "Result_Color.png");//連続は不可らしい
//				(new FileReference).save((new PNGEncoder()).encode(canvas_shade.m_Bitmap.bitmapData), "Result_Shade.png");
			}

			private function Save_C():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_color.m_Bitmap.bitmapData), "Result_Color.png");
			}

			private function Save_S():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_shade.m_Bitmap.bitmapData), "Result_Shade.png");
			}

			private function Save_C_Index():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_color.m_BitmapData_Index), "Result_Color_Index.png");
			}

			private function Save_S_Index():void{
				(new FileReference).save((new PNGEncoder()).encode(canvas_shade.m_BitmapData_Index), "Result_Shade_Index.png");
			}

			private function Load_C_Index():void{
				var fr:FileReference = new FileReference();

				//Select => Load
				fr.addEventListener(
					Event.SELECT,//ファイルが選択されたら
					function(e:Event):void{fr.load();}//ロード開始
				);

				//Load => Draw
				fr.addEventListener(
					Event.COMPLETE,
					function(e:Event):void{
						var loader:Loader = new Loader();
						loader.loadBytes(fr.data);

						loader.contentLoaderInfo.addEventListener(
							Event.COMPLETE,
							function(e:Event):void{
								canvas_color.m_BitmapData_Index.draw(loader.content);
								canvas_color.Redraw();
							}
						);
					}
				);

				//実行
				fr.browse();
			}

			private function Load_S_Index():void{
				var fr:FileReference = new FileReference();

				//Select => Load
				fr.addEventListener(
					Event.SELECT,//ファイルが選択されたら
					function(e:Event):void{fr.load();}//ロード開始
				);

				//Load => Draw
				fr.addEventListener(
					Event.COMPLETE,
					function(e:Event):void{
						var loader:Loader = new Loader();
						loader.loadBytes(fr.data);

						loader.contentLoaderInfo.addEventListener(
							Event.COMPLETE,
							function(e:Event):void{
								canvas_shade.m_BitmapData_Index.draw(loader.content);
								canvas_shade.Redraw();
							}
						);
					}
				);

				//実行
				fr.browse();
			}

			private var fr_c:FileReference;
			private function Load_C_Palette():void{
				if(fr_c == null){
					fr_c = new FileReference();

					//Select => Load
					fr_c.addEventListener(
						Event.SELECT,//ファイルが選択されたら
						function(e:Event):void{fr_c.load();}//ロード開始
					);

					//Load => Set
					fr_c.addEventListener(
						Event.COMPLETE,
						function(e:Event):void{
							var i:int;
							var j:int;
							var len:int = info_color.length;

							var yaml_str:String = fr_c.data.toString();
							var yaml_map:Object = YAML.decode(yaml_str);

							for(i = 0; i < len; i++){
								info_color[i].H = yaml_map[i].H;
								info_color[i].S = yaml_map[i].S;
								info_color[i].B = yaml_map[i].B;
								info_color[i].A = yaml_map[i].A;
							}

							//色相・彩度
							palette_hs_color.SetData(
								info_color
							);

							//明度
							palette_b_color.SetData(
								info_color
							);

							//アルファ
							palette_a_color.SetData(
								info_color
							);

							//リスナ連鎖によるカラーパレットの初期化
							{
								//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
								for(i = 0; i <= len; i++){
									palette_c_color.SetCursorIndex(i % len);

									for(j = 0; j < palette_hs_color.m_ListenerList_ChangeColor.length; j++){
										palette_hs_color.m_ListenerList_ChangeColor[j]();
									}
								}
							}
						}
					);
				}

				//実行
				fr_c.browse();
			}

			private function Save_C_Palette():void{
				//セーブ情報
				var palette_color:Object;
				{
					var list_h:Array = palette_hs_color.GetHueRatioList();
					var list_s:Array = palette_hs_color.GetSaturationRatioList();
					var list_b:Array = palette_b_color.GetBrightnessRatioList();
					var list_a:Array = palette_a_color.GetAlphaRatioList();

					var list:Array = new Array(info_color.length);
					{
						for(var i:int = 0; i < info_color.length; i++){
							list[i] = {
								H:(list_h[i]),
								S:(list_s[i]),
								B:(list_b[i]),
								A:(list_a[i])
							};
						}
					}

					palette_color = list;//{palette_color:list};
				}

				var result:String = YAML.encode(palette_color);

				(new FileReference).save(result, "Palette_Color.yaml");
			}

			private var fr_s:FileReference;
			private function Load_S_Palette():void{
				if(fr_s == null){
					fr_s = new FileReference();

					//Select => Load
					fr_s.addEventListener(
						Event.SELECT,//ファイルが選択されたら
						function(e:Event):void{fr_s.load();}//ロード開始
					);

					//Load => Set
					fr_s.addEventListener(
						Event.COMPLETE,
						function(e:Event):void{
							var i:int;
							var j:int;
							var len:int = info_shade.length;

							var yaml_str:String = fr_s.data.toString();
							var yaml_map:Object = YAML.decode(yaml_str);

							for(i = 0; i < len; i++){
								info_shade[i].H = yaml_map[i].H;
								info_shade[i].S = yaml_map[i].S;
								info_shade[i].B = yaml_map[i].B;
								info_shade[i].A = yaml_map[i].A;
							}

							//色相・彩度
							palette_hs_shade.SetData(
								info_shade
							);

							//明度
							palette_b_shade.SetData(
								info_shade
							);

							//アルファ
							palette_a_shade.SetData(
								info_shade
							);

							//リスナ連鎖によるカラーパレットの初期化
							{
								//ちょっと強引なので、もう少しスマートな方法があればそちらが良い
								for(i = 0; i <= len; i++){
									palette_c_shade.SetCursorIndex(i % len);

									for(j = 0; j < palette_hs_shade.m_ListenerList_ChangeColor.length; j++){
										palette_hs_shade.m_ListenerList_ChangeColor[j]();
									}
								}
							}
						}
					);
				}

				//実行
				fr_s.browse();
			}

			private function Save_S_Palette():void{
				//セーブ情報
				var palette_shade:Object;
				{
					var list_h:Array = palette_hs_shade.GetHueRatioList();
					var list_s:Array = palette_hs_shade.GetSaturationRatioList();
					var list_b:Array = palette_b_shade.GetBrightnessRatioList();
					var list_a:Array = palette_a_shade.GetAlphaRatioList();

					var list:Array = new Array(info_shade.length);
					{
						for(var i:int = 0; i < info_shade.length; i++){
							list[i] = {
								H:(list_h[i]),
								S:(list_s[i]),
								B:(list_b[i]),
								A:(list_a[i])
							};
						}
					}

					palette_shade = list;//{palette_shade:list};
				}

				var result:String = YAML.encode(palette_shade);

				(new FileReference).save(result, "Palette_Shade.yaml");
			}

			public function Canvas_Color_x(in_Ratio:Number):void{
				canvas_color.scaleX = in_Ratio;
				canvas_color.scaleY = in_Ratio;
			}

			public function Canvas_Shade_x(in_Ratio:Number):void{
				canvas_shade.scaleX = in_Ratio;
				canvas_shade.scaleY = in_Ratio;
			}

			public function Canvas_Color_SetCursorMode(in_Mode:int):void{
				canvas_color.SetCursorMode(in_Mode);
			}

			public function Canvas_Shade_SetCursorMode(in_Mode:int):void{
				canvas_shade.SetCursorMode(in_Mode);
			}

			public function Canvas_Color_Draw(in_Mode:int):void{
				canvas_color.SetDrawMode(in_Mode);
			}

			public function Canvas_Shade_Draw(in_Mode:int):void{
				canvas_shade.SetDrawMode(in_Mode);
			}


			public function ScrollBitmap(in_MoveX:int, in_MoveY:int):void{
				const Scroll:Function = function(in_Canvas:Canvas_Zoom):void{
					var ori_bmp_data:BitmapData = in_Canvas.m_BitmapData_Index.clone();

					//すごく愚直にやるので遅い
					for(var y:int = Canvas_Zoom.DOT_NUM; y < 2*Canvas_Zoom.DOT_NUM; y++){//「%」だけで済むように、ゲタをはかせる
						for(var x:int = Canvas_Zoom.DOT_NUM; x < 2*Canvas_Zoom.DOT_NUM; x++){
							in_Canvas.m_BitmapData_Index.setPixel32(
								(x + in_MoveX) % Canvas_Zoom.DOT_NUM,
								(y + in_MoveY) % Canvas_Zoom.DOT_NUM,
								ori_bmp_data.getPixel32(
									x % Canvas_Zoom.DOT_NUM,
									y % Canvas_Zoom.DOT_NUM
								)
							);
						}
					}

					//反映
					in_Canvas.Redraw();
				};

				Scroll(canvas_color);
				Scroll(canvas_shade);
			}
/*
			public function ChangeLabel():void{
				var color:uint = palette_b_color.GetColor();

				var vec:Vector3D = new Vector3D((color >> 16) & 0xFF, (color >> 8) & 0xFF, (color >> 0) & 0xFF);

				var len:Number = vec.length;

				var str:String = "";
				for(var i:Number = 100; i >= 0.1; i *= 0.1){
					var val:int = len / i;

					str = str + val;

					if(0.9 < i && i < 1.1){//i == 1だとNumberなので不安
						str = str + ".";
					}

					len -= val * i;
				}

				label_color.text = str;
			}
//*/
		]]>
	</mx:Script>

	<!--Style-->
	<mx:Style source="style.css"/>

	<!--View-->
	<mx:HBox id="base_box" paddingTop="10">
		<!--Space-->
		<mx:Spacer width="100%"/>

		<!--HSBA-->
		<mx:VBox height="100%">
			<mx:Panel title="色相・彩度(H_S)">
				<comp:Palette_HS id="palette_hs_color"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="100%"/>

			<mx:Panel title="輝度(L)"><!--Old:明度(B)-->
				<comp:Palette_B  id="palette_b_color"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="100%"/>

			<mx:Panel title="アルファ(A)">
				<comp:Palette_A  id="palette_a_color"/>
			</mx:Panel>

<!--
			<mx:Spacer height="100%"/>

			<mx:Label id="label_color" color="0xFFFFFF"/>
-->
		</mx:VBox>

		<!--Color-->
		<mx:VBox>
			<mx:Panel title="色(Color)" paddingLeft="20" paddingRight="20">
				<comp:Palette_Color id="palette_c_color"/>
			</mx:Panel>
		</mx:VBox>

		<!--Canvas : Color-->
		<mx:VBox>
			<!--Button : Size-->
			<mx:Panel title="キャンバスの倍率(Size)" width="100%" layout="horizontal">
				<mx:Spacer width="100%"/>
				<mx:RadioButtonGroup id="radio_color_size"/>
				<mx:RadioButton groupName="radio_color_size" label="x1" buttonDown="Canvas_Color_x(1)" selected="true"/>
				<mx:RadioButton groupName="radio_color_size" label="x2" buttonDown="Canvas_Color_x(2)" />
				<mx:RadioButton groupName="radio_color_size" label="x4" buttonDown="Canvas_Color_x(4)" />
				<mx:RadioButton groupName="radio_color_size" label="x8" buttonDown="Canvas_Color_x(8)" />
				<mx:Spacer width="100%"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="10%"/>

			<!--Button : Cursor-->
			<mx:Panel title="カーソルのモード(Cursor_Mode)" width="100%" layout="horizontal">
				<mx:Spacer width="100%"/>
				<mx:RadioButtonGroup id="radio_color_cursor_mode"/>
				<mx:RadioButton groupName="radio_color_cursor_mode" label="Normal"
					buttonDown="Canvas_Color_SetCursorMode(Canvas_Zoom.CURSOR_MODE_NORMAL)"/>
				<mx:RadioButton groupName="radio_color_cursor_mode" label="Mirror16"
					buttonDown="Canvas_Color_SetCursorMode(Canvas_Zoom.CURSOR_MODE_MIRROR_16_16)"/>
				<mx:RadioButton groupName="radio_color_cursor_mode" label="Mirror15"
					buttonDown="Canvas_Color_SetCursorMode(Canvas_Zoom.CURSOR_MODE_MIRROR_15_1_15)" selected="true"/>
				<mx:Spacer width="100%"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="10%"/>

			<!--Canvas-->
			<mx:Panel title="「色」キャンバス(Canvas_Color)" width="100%" layout="horizontal">
				<mx:Box id="box_canvas_color" verticalScrollPolicy="on" horizontalScrollPolicy="on">
					<comp:Canvas_Zoom id="canvas_color"/>
				</mx:Box>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="10%"/>

			<!--Button : Draw-->
			<mx:Panel title="描画方法(Draw)" width="100%" layout="horizontal">
				<mx:Spacer width="100%"/>
				<mx:RadioButtonGroup id="radio_color_draw"/>
				<mx:RadioButton groupName="radio_color_draw" label="Dot"  buttonDown="Canvas_Color_Draw(Canvas_Zoom.DRAW_MODE_DOT)" selected="true"/>
				<mx:RadioButton groupName="radio_color_draw" label="Fill" buttonDown="Canvas_Color_Draw(Canvas_Zoom.DRAW_MODE_FILL)" />
				<mx:Spacer width="100%"/>
			</mx:Panel>
		</mx:VBox>

		<!--Space-->
		<mx:Spacer width="100%"/>

		<!--Canvas : Result-->
		<mx:VBox height="100%">
			<!--Space-->
			<mx:Spacer height="100%"/>

			<!--Load-->
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Load_CI" buttonDown="Load_C_Index()"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="Load_SI" buttonDown="Load_S_Index()"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>

			<!--Load-->
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Load_CP" buttonDown="Load_C_Palette()"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="Load_SP" buttonDown="Load_S_Palette()"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>

			<!--Canvas-->
			<mx:Panel title="結果(Result)" width="100%">
				<comp:Canvas_Result id="canvas_result"/>
			</mx:Panel>

			<!--Save-->
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Save" buttonDown="Save()"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>

			<!--Save-->
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Save_C" buttonDown="Save_C()"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="Save_S" buttonDown="Save_S()"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>

			<!--Save-->
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Save_CI" buttonDown="Save_C_Index()"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="Save_SI" buttonDown="Save_S_Index()"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>

			<!--Save-->
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Save_CP" buttonDown="Save_C_Palette()"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="Save_SP" buttonDown="Save_S_Palette()"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>

			<!--Space-->
			<mx:Spacer height="20"/>

			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Grid>
					<mx:GridRow>
						<mx:GridItem/>
						<mx:GridItem> <mx:Button label="↑" buttonDown="ScrollBitmap( 0, -1)"/> </mx:GridItem>
						<mx:GridItem/>
					</mx:GridRow>
					<mx:GridRow>
						<mx:GridItem> <mx:Button label="←" buttonDown="ScrollBitmap(-1,  0)"/> </mx:GridItem>
						<mx:GridItem/>
						<mx:GridItem> <mx:Button label="→" buttonDown="ScrollBitmap( 1,  0)"/> </mx:GridItem>
					</mx:GridRow>
					<mx:GridRow>
						<mx:GridItem/>
						<mx:GridItem> <mx:Button label="↓" buttonDown="ScrollBitmap( 0,  1)"/> </mx:GridItem>
						<mx:GridItem/>
					</mx:GridRow>
				</mx:Grid>
				<mx:Spacer width="100%"/>
			</mx:HBox>

			<!--Space-->
			<mx:Spacer height="100%"/>
		</mx:VBox>

		<!--Space-->
		<mx:Spacer width="100%"/>

		<!--Canvas : Shade-->
		<mx:VBox>
			<!--Button : Size-->
			<mx:Panel title="キャンバスの倍率(Size)" width="100%" layout="horizontal">
				<mx:Spacer width="100%"/>
				<mx:RadioButtonGroup id="radio_shade_size"/>
				<mx:RadioButton groupName="radio_shade_size" label="x1" buttonDown="Canvas_Shade_x(1)" selected="true"/>
				<mx:RadioButton groupName="radio_shade_size" label="x2" buttonDown="Canvas_Shade_x(2)" />
				<mx:RadioButton groupName="radio_shade_size" label="x4" buttonDown="Canvas_Shade_x(4)" />
				<mx:RadioButton groupName="radio_shade_size" label="x8" buttonDown="Canvas_Shade_x(8)" />
				<mx:Spacer width="100%"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="10%"/>

			<!--Button : Cursor-->
			<mx:Panel title="カーソルのモード(Cursor_Mode)" width="100%" layout="horizontal">
				<mx:Spacer width="100%"/>
				<mx:RadioButtonGroup id="radio_shade_cursor_mode"/>
				<mx:RadioButton groupName="radio_shade_cursor_mode" label="Normal"
					buttonDown="Canvas_Shade_SetCursorMode(Canvas_Zoom.CURSOR_MODE_NORMAL)"/>
				<mx:RadioButton groupName="radio_shade_cursor_mode" label="Mirror16"
					buttonDown="Canvas_Shade_SetCursorMode(Canvas_Zoom.CURSOR_MODE_MIRROR_16_16)"/>
				<mx:RadioButton groupName="radio_shade_cursor_mode" label="Mirror15"
					buttonDown="Canvas_Shade_SetCursorMode(Canvas_Zoom.CURSOR_MODE_MIRROR_15_1_15)" selected="true"/>
				<mx:Spacer width="100%"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="10%"/>

			<!--Canvas-->
			<mx:Panel title="「陰」キャンバス(Canvas_Shade)" width="100%" layout="horizontal">
				<mx:Box id="box_canvas_shade" verticalScrollPolicy="on" horizontalScrollPolicy="on">
					<comp:Canvas_Zoom id="canvas_shade"/>
				</mx:Box>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="10%"/>

			<!--Button : Draw-->
			<mx:Panel title="描画方法(Draw)" width="100%" layout="horizontal">
				<mx:Spacer width="100%"/>
				<mx:RadioButtonGroup id="radio_shade_draw"/>
				<mx:RadioButton groupName="radio_shade_draw" label="Dot"  buttonDown="Canvas_Shade_Draw(Canvas_Zoom.DRAW_MODE_DOT)" selected="true"/>
				<mx:RadioButton groupName="radio_shade_draw" label="Fill" buttonDown="Canvas_Shade_Draw(Canvas_Zoom.DRAW_MODE_FILL)" />
				<mx:Spacer width="100%"/>
			</mx:Panel>
		</mx:VBox>

		<!--Color of Shade-->
		<mx:VBox>
			<mx:Panel title="光陰(Shade)" paddingLeft="20" paddingRight="20">
				<comp:Palette_Color id="palette_c_shade"/>
			</mx:Panel>
		</mx:VBox>

		<!--HSBA of Shade-->
		<mx:VBox height="100%">
			<mx:Panel title="色相・彩度(H_S)">
				<comp:Palette_HS id="palette_hs_shade"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="100%"/>

			<mx:Panel title="輝度(L)"><!--Old:明度(B)-->
				<comp:Palette_B  id="palette_b_shade"/>
			</mx:Panel>

			<!--Space-->
			<mx:Spacer height="100%"/>

			<mx:Panel title="アルファ(A)">
				<comp:Palette_A  id="palette_a_shade"/>
			</mx:Panel>
		</mx:VBox>
	</mx:HBox>
</mx:Application>
